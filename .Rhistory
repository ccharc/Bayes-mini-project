w = Q%*%X
x = solve(t(CholQtilde),w)
WinvX= solve(CholQtilde,x)
betahat = solve(t(X) %*% WinvX) %*% t(X) %*%  WinvY
#check when n small
#Winv=solve(Qtilde)%*%Q
#betahat=solve(t(X)%*%Winv%*%X)%*%t(X)%*%Winv%*%y#OK
#compute \hat \sigma^2(\theta)
residual=y-X%*%betahat
w = Q%*%residual
x = solve(t(CholQtilde),w)
WinvRes= solve(CholQtilde,x)
sigma2hat=sum(residual*WinvRes)/n
#check
#z3=Winv%*%residual
#sigma2hat=sum(residual*z3)/n
#sigma2hat
#compute log likelihood. Note: determinant returns log determinant of original matrix.
#check (only for small n)
#V=sigma2hat*(diag(rep(1,n))+solve(Q)*phi)
#-log(det(V))/2#-1.92
#Vinv=solve(Qtilde)%*%Q/sigma2hat#OK
#detVinv=det(Q)/(det(Qtilde)*sigma2hat^n)
#logdetVinvhalf=log(det(Q))/2-log(det(Qtilde))/2-n*log(sigma2hat)/2
detQ=det(Q)
loglikelihood=-n*log(sigma2hat)/2-determinant(CholQtilde)$modulus+log(detQ)/2
#return negative log likelihood for later use with optim() which minimizes as default.
if (minimize)
return(-loglikelihood)
else
return(list(-loglikelihood,betahat,sigma2hat))
}
data =  data.frame(read.csv("elconsdata.csv",sep=";"))
y = as.matrix(data[,1])
X = as.matrix(data[,2:3])
a=0.5
fit1 = profile.likelihood(a,y,X)
afit=optimize(profile.likelihood,interval=c(-1,1),y=y,X=X,maximum=T)
logL1 = profile.likelihood(afit$maximum,y,X,maximize=F)
beta = coef(logL1[[2]])
beta
sigma = summary(logL1[[2]])$sigma
sigma
mod = neg.log.profile.likelihood(theta,y,X,minimize=T)
tempa=(a+1)/2
thetastart=c(log(tempa/(1-tempa)),log(tau2/sigma2))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
tempa=(0.3+1)/2
thetastart=c(log(tempa/(1-tempa)),log(1))
thetafit=optim(thetastart,neg.log.profile.likelihood,y=y,X=X)
thetafit
ahat=2*exp(thetafit$par[1])/(1+exp(thetafit$par[1]))-1
phihat=exp(thetafit$par[2])
tempa=(ahat+1)/2
thetastart=c(log(tempa/(1-tempa)),log(phihat))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
mod = neg.log.profile.likelihood(theta,y,X,minimize=T)
theta =c(beta,tau)
tau = summary(logL1[[2]])$sigma
theta =c(beta,tau)
mod = neg.log.profile.likelihood(theta,y,X,minimize=T)
tempa=(a+1)/2
thetastart=c(log(tempa/(1-tempa)),log(tau2/sigma2))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
tempa=(0.3+1)/2
thetastart=c(log(tempa/(1-tempa)),log(1))
thetafit=optim(thetastart,neg.log.profile.likelihood,y=y,X=X)
thetafit
ahat=2*exp(thetafit$par[1])/(1+exp(thetafit$par[1]))-1
phihat=exp(thetafit$par[2])
tempa=(ahat+1)/2
thetastart=c(log(tempa/(1-tempa)),log(phihat))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
summary(mod)
mod = neg.log.profile.likelihood(theta,y,X,minimize=T)
p = coef(mod)
p = coef([mod])
p = coef([[mod]])
p = coef(mod[[2]])
p = coef(logL1[[2]])
beta = coef(logL1[[2:3]])
tau = summary(logL1[[2:3]])$sigma
print(c(a,phi))
#reparametrization so we are sure to have positive phi and |a|<1
#theta=(logit((a+1)/2),log(phi))
#if A=t(R)%*%R then we can compute z=A^{-1}x by solving Az=x wrt. z. That is
#first temp=solve(t(R),x) and secondly z=solve(R,temp)
neg.log.profile.likelihood=function(theta,y,X,minimize=T){
a=2*exp(theta[1])/(1+exp(theta[1]))-1
phi=exp(theta[2])
print(c(a,phi))
n=length(y)
#construct B and sqrt(D) as sparse matrices
B1 = sparseMatrix(i=c(1:n,2:n), j=c(1:n,2:n-1), x=c(rep(1,n),rep(-a, n-1)), dims=c(n,n), triangular = TRUE)
sqDinv = sqrt(sparseMatrix(i=c(1:n), j=c(1:n), x=c((1-a^2),rep(1,n-1))))
#Compute Q and Qtilde (again as sparse matrices)
Q  = t(B1)%*%sqDinv%*%B1
Qtilde=sparseMatrix(i=c(1:n),j=c(1:n),x=rep(phi,n))+Q
#compute Cholesky factorization
CholQtilde=chol(Qtilde)
#compute \hat \beta(\theta)
#(X^T W^{-1} X)^{-1} X^\T W^{-1} y
#using Cholesky factor CholQtilde
w = Q%*%y
x = solve(t(CholQtilde),w)
WinvY= solve(CholQtilde,x)
w = Q%*%X
x = solve(t(CholQtilde),w)
WinvX= solve(CholQtilde,x)
betahat = solve(t(X) %*% WinvX) %*% t(X) %*%  WinvY
#check when n small
#Winv=solve(Qtilde)%*%Q
#betahat=solve(t(X)%*%Winv%*%X)%*%t(X)%*%Winv%*%y#OK
#compute \hat \sigma^2(\theta)
residual=y-X%*%betahat
w = Q%*%residual
x = solve(t(CholQtilde),w)
WinvRes= solve(CholQtilde,x)
sigma2hat=sum(residual*WinvRes)/n
#check
#z3=Winv%*%residual
#sigma2hat=sum(residual*z3)/n
#sigma2hat
#compute log likelihood. Note: determinant returns log determinant of original matrix.
#check (only for small n)
#V=sigma2hat*(diag(rep(1,n))+solve(Q)*phi)
#-log(det(V))/2#-1.92
#Vinv=solve(Qtilde)%*%Q/sigma2hat#OK
#detVinv=det(Q)/(det(Qtilde)*sigma2hat^n)
#logdetVinvhalf=log(det(Q))/2-log(det(Qtilde))/2-n*log(sigma2hat)/2
detQ=det(Q)
loglikelihood=-n*log(sigma2hat)/2-determinant(CholQtilde)$modulus+log(detQ)/2
#return negative log likelihood for later use with optim() which minimizes as default.
if (minimize)
return(-loglikelihood)
else
return(list(-loglikelihood,betahat,sigma2hat))
}
#simulate data
n=10000
a=0.5
tau2=0.25
sigma2=1
ii=c(1:n,2:n)
jj=c(1:n,1:(n-1))
Binvij=c(rep(1,n),rep(-a,n-1))
Binv=sparseMatrix(i=ii,j=jj,x=Binvij,dims=c(n,n))
Droot=sparseMatrix(i=c(1:n),j=c(1:n),x=sqrt(c(1/(1-a^2),rep(1,n-1))))
nu=sqrt(tau2)*Droot%*%rnorm(n)
U=solve(Binv,nu)
plot(U,type="l")
mean(U)
var(as.numeric(U))
acf(as.numeric(U))
x=rnorm(n)
X=cbind(rep(1,n),x)
y=3+2*x+U+rnorm(n,sd=sqrt(sigma2))
tempa=(a+1)/2
thetastart=c(log(tempa/(1-tempa)),log(tau2/sigma2))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
tempa=(0.3+1)/2
thetastart=c(log(tempa/(1-tempa)),log(1))
thetafit=optim(thetastart,neg.log.profile.likelihood,y=y,X=X)
thetafit
ahat=2*exp(thetafit$par[1])/(1+exp(thetafit$par[1]))-1
phihat=exp(thetafit$par[2])
tempa=(ahat+1)/2
thetastart=c(log(tempa/(1-tempa)),log(phihat))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
thetastart=c(log(tempa/(1-tempa)),log(1))
thetafit=optim(thetastart,neg.log.profile.likelihood,y=y,X=X)
thetafit
ahat=2*exp(thetafit$par[1])/(1+exp(thetafit$par[1]))-1
phihat=exp(thetafit$par[2])
tempa=(ahat+1)/2
thetastart=c(log(tempa/(1-tempa)),log(phihat))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
thetastart=c(log(a/(1-a)),log(1))
data =  data.frame(read.csv("elconsdata.csv",sep=";"))
y = as.matrix(data[,1])
X = as.matrix(data[,2:3])
a=0.5
beta = coef(logL1[[2]])
tau = summary(logL1[[2]])$sigma
#skeleton for profile likelihood procedure
profile.likelihood=function(a,y,X,maximize=T) {
n=length(y)
B1 = sparseMatrix(i=c(1:n,2:n), j=c(1:n,2:n-1), x=c(rep(1,n),rep(-a, n-1)), dims=c(n,n), triangular = TRUE)
sqDinv = sqrt(sparseMatrix(i=c(1:n), j=c(1:n), x=c((1-a^2),rep(1,n-1))))
S = sqDinv %*% B1
ytilde=as.numeric(S%*%y)
Xtilde=as.matrix(S%*%cbind(rep(1,n),X))
fit=lm(ytilde~-1+Xtilde)
detS=det(S)
if (maximize){
return(logLik(fit)*detS)
}else{
loglikelihood = logLik(fit)*detS
return(list(loglikelihood,fit))
}
}
library(Matrix)
#skeleton for profile likelihood procedure
profile.likelihood=function(a,y,X,maximize=T) {
n=length(y)
B1 = sparseMatrix(i=c(1:n,2:n), j=c(1:n,2:n-1), x=c(rep(1,n),rep(-a, n-1)), dims=c(n,n), triangular = TRUE)
sqDinv = sqrt(sparseMatrix(i=c(1:n), j=c(1:n), x=c((1-a^2),rep(1,n-1))))
S = sqDinv %*% B1
ytilde=as.numeric(S%*%y)
Xtilde=as.matrix(S%*%cbind(rep(1,n),X))
fit=lm(ytilde~-1+Xtilde)
detS=det(S)
if (maximize){
return(logLik(fit)*detS)
}else{
loglikelihood = logLik(fit)*detS
return(list(loglikelihood,fit))
}
}
detQ=det(Q)
neg.log.profile.likelihood=function(theta,y,X,minimize=T){
a=2*exp(theta[1])/(1+exp(theta[1]))-1
phi=exp(theta[2])
print(c(a,phi))
n=length(y)
#construct B and sqrt(D) as sparse matrices
B1 = sparseMatrix(i=c(1:n,2:n), j=c(1:n,2:n-1), x=c(rep(1,n),rep(-a, n-1)), dims=c(n,n), triangular = TRUE)
sqDinv = sqrt(sparseMatrix(i=c(1:n), j=c(1:n), x=c((1-a^2),rep(1,n-1))))
#Compute Q and Qtilde (again as sparse matrices)
Q  = t(B1)%*%sqDinv%*%B1
Qtilde=sparseMatrix(i=c(1:n),j=c(1:n),x=rep(phi,n))+Q
#compute Cholesky factorization
CholQtilde=chol(Qtilde)
#compute \hat \beta(\theta)
#(X^T W^{-1} X)^{-1} X^\T W^{-1} y
#using Cholesky factor CholQtilde
w = Q%*%y
x = solve(t(CholQtilde),w)
WinvY= solve(CholQtilde,x)
w = Q%*%X
x = solve(t(CholQtilde),w)
WinvX= solve(CholQtilde,x)
betahat = solve(t(X) %*% WinvX) %*% t(X) %*%  WinvY
#check when n small
#Winv=solve(Qtilde)%*%Q
#betahat=solve(t(X)%*%Winv%*%X)%*%t(X)%*%Winv%*%y#OK
#compute \hat \sigma^2(\theta)
residual=y-X%*%betahat
w = Q%*%residual
x = solve(t(CholQtilde),w)
WinvRes= solve(CholQtilde,x)
sigma2hat=sum(residual*WinvRes)/n
#check
#z3=Winv%*%residual
#sigma2hat=sum(residual*z3)/n
#sigma2hat
#compute log likelihood. Note: determinant returns log determinant of original matrix.
#check (only for small n)
#V=sigma2hat*(diag(rep(1,n))+solve(Q)*phi)
#-log(det(V))/2#-1.92
#Vinv=solve(Qtilde)%*%Q/sigma2hat#OK
#detVinv=det(Q)/(det(Qtilde)*sigma2hat^n)
#logdetVinvhalf=log(det(Q))/2-log(det(Qtilde))/2-n*log(sigma2hat)/2
detQ=det(Q)
loglikelihood=-n*log(sigma2hat)/2-determinant(CholQtilde)$modulus+log(detQ)/2
#return negative log likelihood for later use with optim() which minimizes as default.
if (minimize)
return(-loglikelihood)
else
return(list(-loglikelihood,betahat,sigma2hat))
}
data =  data.frame(read.csv("elconsdata.csv",sep=";"))
y = as.matrix(data[,1])
X = as.matrix(data[,2:3])
a=0.5
fit1 = profile.likelihood(a,y,X)
afit=optimize(profile.likelihood,interval=c(-1,1),y=y,X=X,maximum=T)
logL1 = profile.likelihood(afit$maximum,y,X,maximize=F)
beta = coef(logL1[[2]])
tau = summary(logL1[[2]])$sigma
theta =c(a,phi)
mod = neg.log.profile.likelihood(theta,y,X,minimize=T)
thetastart=c(log(a/(1-a)),log(1))
thetafit=optim(thetastart,neg.log.profile.likelihood,y=y,X=X)
thetafit
ahat=2*exp(thetafit$par[1])/(1+exp(thetafit$par[1]))-1
phihat=exp(thetafit$par[2])
a=(ahat+1)/2
thetastart=c(log(tempa/(1-tempa)),log(phihat))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
data =  data.frame(read.csv("elconsdata.csv",sep=";"))
y = as.matrix(data[,1])
X = as.matrix(data[,2:3])
a=0.aa
fit1 = profile.likelihood(a,y,X)
afit=optimize(profile.likelihood,interval=c(-1,1),y=y,X=X,maximum=T)
logL1 = profile.likelihood(afit$maximum,y,X,maximize=F)
beta = coef(logL1[[2]])
tau = summary(logL1[[2]])$sigma
theta =c(a,phi)
mod = neg.log.profile.likelihood(theta,y,X,minimize=T)
thetastart=c(log(a/(1-a)),log(1))
thetafit=optim(thetastart,neg.log.profile.likelihood,y=y,X=X)
thetafit
ahat=2*exp(thetafit$par[1])/(1+exp(thetafit$par[1]))-1
phihat=exp(thetafit$par[2])
a=(ahat+1)/2
thetastart=c(log(a/(1-a)),log(phihat))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
data =  data.frame(read.csv("elconsdata.csv",sep=";"))
y = as.matrix(data[,1])
X = as.matrix(data[,2:3])
a=0.99
fit1 = profile.likelihood(a,y,X)
afit=optimize(profile.likelihood,interval=c(-1,1),y=y,X=X,maximum=T)
logL1 = profile.likelihood(afit$maximum,y,X,maximize=F)
beta = coef(logL1[[2]])
tau = summary(logL1[[2]])$sigma
theta =c(a,phi)
mod = neg.log.profile.likelihood(theta,y,X,minimize=T)
thetastart=c(log(a/(1-a)),log(1))
thetafit=optim(thetastart,neg.log.profile.likelihood,y=y,X=X)
thetafit
ahat=2*exp(thetafit$par[1])/(1+exp(thetafit$par[1]))-1
phihat=exp(thetafit$par[2])
a=(ahat+1)/2
thetastart=c(log(a/(1-a)),log(phihat))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
k <- 0
go <- TRUE
like.for.model.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(cbind(rep(1,nrow(X)), X)) %*% (coef(fit.mod))
+ sample(resid(fit.mod), length(Y), replace = T)
afit2 <- optimize(profile.likelihood,interval=c(-1,1),y=y.sim,X=X,maximum=T)
like.for.model.bootstrapping <- c(like.for.model.bootstrapping, afit2$objective)
k <- k+1
go <- k<1e3
}
#Bootstrap
k <- 0
go <- TRUE
like.for.model.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(cbind(rep(1,nrow(X)), X)) %*% (coef(logL1))
+ sample(resid(logL1), length(y), replace = T)
afit2 <- optimize(profile.likelihood,interval=c(-1,1),y=y.sim,X=X,maximum=T)
like.for.model.bootstrapping <- c(like.for.model.bootstrapping, afit2$objective)
k <- k+1
go <- k<1e3
}
k <- 0
go <- TRUE
like.for.model.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(cbind(rep(1,nrow(X)), X)) %*% (coef(logL1))
+ sample(resid(logL1), length(y), replace = T)
afit2 <- optimize(profile.likelihood,interval=c(-1,1),y=y.sim,X=X,maximum=T)
like.for.model.bootstrapping <- c(like.for.model.bootstrapping, afit2$objective)
k <- k+1
go <- k<1e3
}
k <- 0
go <- TRUE
like.for.model.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(cbind(rep(1,nrow(X)), X)) %*% (coef(logL1[[2]]))
+ sample(resid(logL1), length(y), replace = T)
afit2 <- optimize(profile.likelihood,interval=c(-1,1),y=y.sim,X=X,maximum=T)
like.for.model.bootstrapping <- c(like.for.model.bootstrapping, afit2$objective)
k <- k+1
go <- k<1e3
}
install.packages("boot")
library(boot)
library(boot, lib.loc = "C:/Program Files/R/R-3.6.1/library")
boot(y ~ X, data=data)
boot(y ~ X, data=data, R = 100)
# Bootstrap 95% CI for regression coefficients
library(boot)
# function to obtain regression weights
bs = profile.likelihood(afit$maximum,y,X,maximize=F) {
d = data # allows boot to select sample
fit3 = lm(y~-1+X)
return(coef(fit3))
}
# bootstrapping with 1000 replications
results <- boot(data=mtcars, statistic=bs,
R=1000, formula=mpg~wt+disp)
# function to obtain regression weights
bs = profile.likelihood(afit$maximum,y,X,maximize=F) {
d = data # allows boot to select sample
fit3 = lm(y~-1+X)
return(coef(fit3))
}
library(boot)
# function to obtain regression weights
bs = profile.likelihood(afit$maximum,y,X,maximize=F) {
d = data # allows boot to select sample
fit3 = lm(y~-1+X)
return(coef(fit3))
}
# bootstrapping with 1000 replications
results <- boot(data=mtcars, statistic=bs,
R=1000, formula=mpg~wt+disp)
library(boot)
# function to obtain regression weights
bs = profile.likelihood(afit$maximum,y,X,maximize=F) {
d = data # allows boot to select sample
fit3 = lm(y~-1+X)
return(coef(fit3))
}
library(boot)
# function to obtain regression weights
bs = profile.likelihood(afit$maximum,y,X,maximize=F) {
d = data # allows boot to select sample
fit3 = lm(y~1+X)
return(coef(fit3))
}
data =  data.frame(read.csv("elconsdata.csv",sep=";"))
y = as.matrix(data[,1])
X = as.matrix(data[,2:3])
a=0.99
fit.mod = profile.likelihood(a,y,X)
afit=optimize(profile.likelihood,interval=c(-1,1),y=y,X=X,maximum=T)
logL1 = profile.likelihood(afit$maximum,y,X,maximize=F)
beta = coef(logL1[[2]])
tau = summary(logL1[[2]])$sigma
theta =c(a,phi)
mod = neg.log.profile.likelihood(theta,y,X,minimize=T)
thetastart=c(log(a/(1-a)),log(1))
thetafit=optim(thetastart,neg.log.profile.likelihood,y=y,X=X)
thetafit
ahat=2*exp(thetafit$par[1])/(1+exp(thetafit$par[1]))-1
phihat=exp(thetafit$par[2])
a=(ahat+1)/2
thetastart=c(log(a/(1-a)),log(phihat))
neg.log.profile.likelihood(thetastart,y,X,minimize=F)
#Bootstrap
k <- 0
go <- TRUE
like.for.model.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(cbind(rep(1,nrow(X)), X)) %*% (coef(fit.mod))
+ sample(resid(fit.mod), length(Y), replace = T)
afit2 <- optimize(profile.likelihood,interval=c(-1,1),y=y.sim,X=X,maximum=T)
like.for.model.bootstrapping <- c(like.for.model.bootstrapping, afit2$objective)
k <- k+1
go <- k<1e3
}
#Bootstrapping for model 2
k <- 0
go <- TRUE
like.for.model2.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(X) %*% (betahat) + sample(residual, length(y), replace = T)
afit2 <- optim(thetastart, neg.log.profile.likelihood, y = y.sim, X = X)
model2 <- neg.log.profile.likelihood(afit2$par, y=y.sim, X = X,
pos = F, maximize = T)
like.for.model2.bootstrapping <- c(like.for.model2.bootstrapping, model2[[1]])
k <- k+1
go <- k<1e3
}
k <- 0
go <- TRUE
like.for.model.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(cbind(rep(1,nrow(X)), X)) %*% (coef(fit.mod))
+ sample(resid(fit.mod), length(Y), replace = T)
afit2 <- optimize(profile.likelihood,interval=c(-1,1),y=y.sim,X=X,maximum=T)
like.for.model.bootstrapping <- c(like.for.model.bootstrapping, afit2$objective)
k <- k+1
go <- k<1e3
}
#Bootstrapping for model 2
k <- 0
go <- TRUE
like.for.model2.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(X) %*% (beta) + sample(residual, length(y), replace = T)
afit2 <- optim(thetastart, neg.log.profile.likelihood, y = y.sim, X = X)
model2 <- neg.log.profile.likelihood(afit2$par, y=y.sim, X = X,
pos = F, maximize = T)
like.for.model2.bootstrapping <- c(like.for.model2.bootstrapping, model2[[1]])
k <- k+1
go <- k<1e3
}
k <- 0
go <- TRUE
like.for.model2.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(X) %*% c(beta) + sample(residual, length(y), replace = T)
afit2 <- optim(thetastart, neg.log.profile.likelihood, y = y.sim, X = X)
model2 <- neg.log.profile.likelihood(afit2$par, y=y.sim, X = X,
pos = F, maximize = T)
like.for.model2.bootstrapping <- c(like.for.model2.bootstrapping, model2[[1]])
k <- k+1
go <- k<1e3
}
#Bootstrapping for model 2
k <- 0
go <- TRUE
like.for.model2.bootstrapping <- NULL
while(go){
y.sim <- as.matrix(X) * (beta) + sample(residual, length(y), replace = T)
afit2 <- optim(thetastart, neg.log.profile.likelihood, y = y.sim, X = X)
model2 <- neg.log.profile.likelihood(afit2$par, y=y.sim, X = X,
pos = F, maximize = T)
like.for.model2.bootstrapping <- c(like.for.model2.bootstrapping, model2[[1]])
k <- k+1
go <- k<1e3
}
